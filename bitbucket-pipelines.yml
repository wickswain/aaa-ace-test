# This is a sample build configuration for Maven.
# Check our guides at https://confluence.atlassian.com/x/VYk8Lw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image:
  name: axis41/systems-eng:latest
  username: axis41
  password: $DOCKER_HUB_PW
  email: systems@axis41.com

pipelines:
  branches:
    qa:
      - step:
          script: # Modify the commands below to build your repository.
            - . /etc/profile.d/jdk.sh
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - export AWS_DEFAULT_REGION=${AWS_REGION}
            - read AUT_NAME AUT_IP AUT_INSTANCE_ID AUT_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`aaa_qa_aut`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502
            - mvn --version 3.1.0 
            - mvn clean install -Dcrx.host=${AUT_IP} -Dcrx.port=4502 -Dcrx.userId=admin -Dcrx.password="$AEM_QA" -PautoInstallPackage
            - aws ec2 revoke-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502

            - read PUB_NAME PUB_IP PUB_INSTANCE_ID PUB_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`aaa_qa_pub1`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503
            - mvn --version 3.1.0
            - mvn clean install -Dcrx.host=${PUB_IP} -Dcrx.port=4503 -Dcrx.userId=admin -Dcrx.password="$AEM_QA" -PautoInstallPackage
            - aws ec2 revoke-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503

    stage:
      - step:
          script: # Modify the commands below to build your repository.
            - . /etc/profile.d/jdk.sh
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - export AWS_DEFAULT_REGION=${AWS_REGION}
            - read AUT_NAME AUT_IP AUT_INSTANCE_ID AUT_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_aut`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502
            - mvn clean install -Dcrx.host=${AUT_IP} -Dcrx.port=4502 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502

            - read PUB_NAME PUB_IP PUB_INSTANCE_ID PUB_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_pub1`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503
            - mvn clean install -Dcrx.host=${PUB_IP} -Dcrx.port=4503 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503

            - read PUB_NAME PUB_IP PUB_INSTANCE_ID PUB_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_pub2`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503
            - mvn clean install -Dcrx.host=${PUB_IP} -Dcrx.port=4503 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503

    master:
      - step:
          script: # Modify the commands below to build your repository.
            - . /etc/profile.d/jdk.sh
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - export AWS_DEFAULT_REGION=${AWS_REGION}
            - read AUT_NAME AUT_IP AUT_INSTANCE_ID AUT_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_aut`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502
            - mvn clean install -Dcrx.host=${AUT_IP} -Dcrx.port=4502 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${AUT_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4502

            - read PUB_NAME PUB_IP PUB_INSTANCE_ID PUB_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_pub1`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503
            - mvn clean install -Dcrx.host=${PUB_IP} -Dcrx.port=4503 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503

            - read PUB_NAME PUB_IP PUB_INSTANCE_ID PUB_DEFAULT_SG <<<$(aws ec2 describe-instances --query 'Reservations[].Instances[].[Tags[?Key==`Name`].Value|[0], PublicIpAddress, InstanceId, SecurityGroups[][].GroupId|[0]][?[0]==`stage_pub2`][]' --output text)
            - aws ec2 authorize-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503
            - mvn clean install -Dcrx.host=${PUB_IP} -Dcrx.port=4503 -Dcrx.userId=admin -Dcrx.password="$AEM_STG" -PautoInstallPackage $?=0 || TRUE
            - aws ec2 revoke-security-group-ingress --group-id "${PUB_DEFAULT_SG}" --cidr "$(curl -fs canihazip.com/s)/32" --protocol tcp --port 4503

